% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plsfitCV.R
\name{plsfitCV}
\alias{plsfitCV}
\title{Penalized Least Square Fit under CV}
\usage{
plsfitCV(B, Q2, K, lambda, Y, fx, fold = 5, Z = NULL)
}
\arguments{
\item{B}{The bernstein basis matrix.}

\item{Q2}{The \code{Q2} matrix from QR decomposition of the transpose of the constraint matrix.}

\item{K}{The energy matrix to construct penalty matrix.}

\item{lambda}{The smoothing penalty parameter.}

\item{Y}{Response variable.}

\item{fx}{indicates whether the term is a fixed d.f. regression.
spline (\code{TRUE}) or a penalized regression spline (\code{FALSE}).}

\item{fold}{number of folders to do cross validation.}

\item{Z}{The parametric model matrix. set to '\code{NULL}' if it is not provided.}
}
\value{
A list of fit information.
}
\description{
This is an internal function of package \code{ggam}.
}
\details{
The method is a computationally efficient means of applying cross validation to the problem of smoothing parameter selection:
\deqn{\min _ { \boldsymbol { \beta } , \boldsymbol { \gamma } } \frac { 1 } { 2 } \left\{ \| \mathbf { Y } - \mathbf { Z } \boldsymbol { \beta } - \mathbf { B } \boldsymbol { \gamma } \| ^ { 2 } + \lambda \boldsymbol { \gamma } ^ { \top } \mathbf { P } \gamma \right\}}{\min _ { \boldsymbol { \beta } , \boldsymbol { \gamma } } \frac { 1 } { 2 } \left\{ \| \mathbf { Y } - \mathbf { Z } \boldsymbol { \beta } - \mathbf { B } \boldsymbol { \gamma } \| ^ { 2 } + \lambda \boldsymbol { \gamma } ^ { \top } \mathbf { P } \gamma \right\}}
subject to constraints \eqn{\mathbf { H } \gamma = \mathbf { 0 }}{\mathbf { H } \gamma = \mathbf { 0 }}.
\code{Z} is a parametrix design matrix, \eqn{\beta}{\beta} a parameter vector, \eqn{Y}{Y} a data vector,
\eqn{\gamma}{\gamma} is the berstein coefficients, \eqn{B}{B} is the Bernsterin basis matrix,
\eqn{H}{H} is contraint matrix.
}
\examples{
library(GgAM)
library(Matrix)
library(BPST)
data("eg2pop_dat")
eg2_V20=eg2pop_dat[['V20']]
eg2_T20=eg2pop_dat[['T20']]
eg2pop=eg2pop_dat[['pop']]
d=2
r=1
sam=eg2pop[sample(1:dim(eg2pop)[1],100),]
B0=basis(eg2_V20,eg2_T20, d, r, sam[,3:4])
B=B0$Bi
ind=B0$Ind.inside
Q2=B0$Q2
K=B0$K
Z=sam[ind,c(5:12)]
Y=sam[ind,'Y']
lambda=10^(seq(-2,5,by=1))
plsfitCV(as.matrix(B),Q2,K,lambda,Y,fx=FALSE,Z=Z)
### without parametric part
plsfitCV(as.matrix(B),Q2,K,lambda,Y,fx=FALSE)
}
